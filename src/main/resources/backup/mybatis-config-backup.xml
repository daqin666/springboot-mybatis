<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--default表示默认使用的环境-->
    <environments default="development">
        <!--
			其中的一个环境 连接的数据库是powernode
			一般一个数据库会对应一个SqlSessionFactory对象
			一个环境environment会对应一个SqlSessionFactory对象
  		-->
        <environment id="development">
            <!--
				MyBatis事务管理器接口Transaction有两个实现类
				如果type="JDBC"那么底层会实例化JdbcTransaction对象
				如果type="MANAGED"那么底层会实例化ManagedTransaction对象
			-->
            <transactionManager type="JDBC" />
            <!--
				datasource配置：
					1、dataSource被称为数据源
					2、dataSource为程序提供Connection对象
					3、数据源实际上是一套规范，JDK中有这套规范：javax.sql.DataSource
					4、type有三种值可选其一：
						POOLED：使用MyBatis自己实现的数据库连接池
						UNPOOLED：不适用MyBatis的数据库连接池，每一次请求过来创建新的Connection对象
						JNDI：集成其它第三方的数据库连接池，这是一套规范，大部分Web容器都实现了此规范
			-->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/powernode"/>
                <property name="username" value="root"/>
                <property name="password" value="root"/>
            </dataSource>
        </environment>

        <!--MyBatis另外一个环境，也就是连接的数据库是另一个数据库MyBatis-->
        <environment id="mybatisDB">
            <transactionManager type="JDBC" />
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/mybatis"/>
                <property name="username" value="root"/>
                <property name="password" value="root"/>
            </dataSource>
        </environment>
    </environments>
    <!--通过此标签找到映射文件，实际在SpringBoot中的yml配置文件中变成：mybatis:mapper-locations-->
    <mappers>
        <package name="com.chf.mapper" />
    </mappers>

    <!--
        //获取SqlSessionFactory对象（采用默认方式获取）
		SqlSessionFactoryBuilder ssf = new SqlSessionFactoryBuilder();
        //采用这种方式获取的就是默认的环境
        SqlSessionFactory sqlSessionFactory = ssf.build(Resources.getResourceAsStream("MyBatisConfig.xml"));
        //这种方式通过id获取的是指定的环境
        SqlSessionFactory sqlSessionFactory = ssf.build(Resources.getResourceAsStream("MyBatisConfig.xml"),"mybatisDB");
    -->
</configuration>